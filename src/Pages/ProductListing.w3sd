import React, { useCallback, useEffect, useRef, useState } from "react";
import styled from "styled-components";
import {
  Badge,
  BottomNavigationAction,
  BottomNavigation,
  Checkbox,
  FormControl,
  IconButton,
  MenuItem,
  Select,
  Input,
  TextField,
} from "@mui/material";
import { styled as sty } from "@mui/material/styles";
import { BackupTable, Category, Inventory } from "@mui/icons-material";
import { useSelector } from "react-redux";
import { Link } from "react-router-dom";
import axios from "axios";

import ProductCard from "../Components/ProductCard";
import SearchAppBar from "../Components/StyledSearch";
import Filter from "../Components/Filters/Filter";

/* ────────────────────────  styled‑components  ────────────────────── */

const Container = styled.div`
  background-color: #ffffff;
  width: 100%;
  color: #333333;
`;
const HeadCon = styled.div`
  background-color: #15375a;
  position: sticky;
  top: 0;
  width: 100%;
  z-index: 100;
  padding: 1vh;
  display: flex;
`;
const SearchCon = styled.div`
  margin-left: 5%;
  width: 65%;
  display: flex;
  height: 7vh;
  background-color: ${(p) => p.bg};
  border: 2px solid ${(p) => p.bor};
  border-radius: 8px;
  color: ${(p) => p.col};
`;
const CartCont = styled.div`
  margin-left: auto;
  margin-right: 5%;
  margin-top: 10px;
`;
const ContainerWhole = styled.div`
  display: flex;
  width: 100%;
`;
const FilterWrap = styled.div`
  flex: 5;
  height: 90vh;
  margin: 0 5vh;
  overflow-y: auto;
  -ms-overflow-style: none; /* IE & Edge */
  scrollbar-width: none; /* Firefox */
  &::-webkit-scrollbar {
    display: none; /* Chrome */
  }
`;
const FilterTwoCont = styled.div`
  flex: 2;
  margin-top: 3vh;
  padding: 5vh 0 4vh 5vh;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
`;
const FilterHead = styled.div`
  font-family: Lexend, sans-serif;
  font-size: 16px;
  font-weight: 500;
  text-transform: uppercase;
  margin: 2vh 0 2vh;
`;
const FilterContTwo = styled.div`
  display: grid;
  grid-template-columns: repeat(3, auto);
`;
const FilterCont = styled.label`
  font-family: Lexend, sans-serif;
  font-size: 12px;
  display: block;
`;
const StickyBottom = styled.div`
  position: sticky;
  bottom: 0;
  width: 100%;
  padding: 1rem;
  margin-top: 2vh;
  display: flex;
  flex-direction: row-reverse;
  gap: 0.5vw;
  background-color: #ffffff;
  box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);
  z-index: 10;
`;
const PrimaryButton = styled.button`
  background-color: #09193d;
  color: #fff700;
  border-radius: 4px;
  padding: 0.5rem 1.5rem;
  font-family: Lexend, sans-serif;
  font-weight: 500;
  text-transform: none;
  transition: background-color 0.2s ease;
  &:hover {
    background-color: #0c204f;
  }
`;
const OutlineButton = styled.button`
  background: transparent;
  color: #09193d;
  border: 2px solid #09193d;
  border-radius: 4px;
  padding: 0.5rem 1.5rem;
  font-family: Lexend, sans-serif;
  font-weight: 500;
  text-transform: none;
  transition: all 0.2s ease;
  &:hover {
    background: #09193d;
    color: #fff700;
  }
`;
const WrapperWhole = styled.div`
  flex: 8;
  background-color: #ffffff;
  border-left: 1px solid #e0e0e0;
`;
const WrapperHead = styled.div`
  padding-left: 2vh;
  border-bottom: 1px solid #e0e0e0;
`;
const WrapperTit = styled.div`
  font-family: Lexend, sans-serif;
  font-size: 48px;
  font-weight: 500;
`;
const WrapperFlex = styled.div`
  display: flex;
  width: 100%;
`;
const WrapperNum = styled.div`
  font-family: Lexend, sans-serif;
  font-size: 12px;
  margin-top: auto;
`;
const Sort = styled.div`
  margin-left: auto;
  margin-right: 5%;
  display: flex;
  align-items: center;
`;
const SortText = styled.div`
  font-family: Lexend, sans-serif;
  font-size: 16px;
`;
const NameInput = styled.div`
  padding: 10px;
`;
const Wrapper = styled.div`
  width: 100%;
  padding: 2vh;
  padding-bottom: 5vh;
  height: 80vh; /* or whatever height you like */
  overflow-y: auto; /* THIS is what the ref listens to */
`;

/* ─────────────────────────── MUI tweaks ──────────────────────────── */

const StyledBadge = sty(Badge)(({ theme }) => ({
  "& .MuiBadge-badge": {
    right: -1,
    border: `2px solid ${theme.palette.background.paper}`,
    padding: "0 4px",
    backgroundColor: "#fff700",
    color: "#000000",
  },
}));
const CustomBottomNavigationAction = sty(BottomNavigationAction)`
  color: #ffffff;
  &.Mui-selected {
    color: #fff700;
  }
`;

/* ─────────────────────────── component ──────────────────────────── */

const ProductListing = () => {
  /* ---------------- state ---------------- */
  const [selectedBrand, setSelectedBrand] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedSubCategory1, setSelectedSubCategory1] = useState([]);
  const [selectedSubCategory2, setSelectedSubCategory2] = useState([]);
  const [selectedSubCategory3, setSelectedSubCategory3] = useState([]);
  const [applyFilter, setApplyFilter] = useState(false);

  const [products, setProducts] = useState([]);
  const [nextUrl, setNextUrl] = useState(
    "https://www.boqmasteradmin.com/product/"
  );
  const [nextFilterUrl, setNextFilterUrl] = useState(
    "https://www.boqmasteradmin.com/product/filter/"
  );
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [count, setCount] = useState(0);

  const [searchQuery, setSearchQuery] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [headName, setHeadName] = useState("");

  /* price / brand / category filters (client‑side) */
  const [selectedBrands, setSelectedBrands] = useState([]);
  const [selectedSubCategory, setSelectedSubCategory] = useState([]);
  const [selectedSubFour, setSelectedSubFour] = useState([]);
  const [selectedSubTwo, setSelectedSubTwo] = useState([]);
  const [selectedSubThree, setSelectedSubThree] = useState([]);
  const [selectedSubSeven, setSelectedSubSeven] = useState([]);
  const [selectedSubEight, setSelectedSubEight] = useState([]);
  const [selectedSubEleven, setSelectedSubEleven] = useState([]);
  const [selectedSubTwelve, setSelectedSubTwelve] = useState([]);
  const [priceFilter, setPriceFilter] = useState([0, 100000000]);
  const [sortOrder, setSortOrder] = useState("asc");

  /* ---------------- refs ---------------- */
  const scrollContainerRef = useRef(null);

  /* ---------------- redux cart ---------------- */
  const cart = useSelector((state) => state.cartreducer.carts);
  const cartLen = cart.length;

  /* ---------------- fetch helpers ---------------- */
  const fetchProducts = async (url = null) => {
    if ((nextUrl || url) && !loading) {
      setLoading(true);
      setError(null);
      try {
        const res = await axios.get(url || nextUrl);
        const data = res.data;
        setProducts((prev) => [...prev, ...data.results]);
        setNextUrl(data.next);
        setCount(data.count);
      } catch (_) {
        setError("Failed to load products. Please try again.");
      } finally {
        setLoading(false);
      }
    }
  };

  const fetchProductsWithFilter = async (payload, url = null) => {
    if ((nextFilterUrl || url) && !loading) {
      setLoading(true);
      setError(null);
      try {
        const res = await axios.post(url || nextFilterUrl, payload);
        const data = res.data;
        setProducts((prev) => [...prev, ...data.results]);
        setNextFilterUrl(data.next);
        setCount(data.count);
      } catch (_) {
        setError("Failed to load products. Please try again.");
      } finally {
        setLoading(false);
      }
    }
  };

  /* ---------------- initial load ---------------- */
  useEffect(() => {
    fetchProducts("https://www.boqmasteradmin.com/product/");
  }, []);

  /* ---------------- infinite scroll ---------------- */
  useEffect(() => {
    const container = scrollContainerRef.current;
    if (!container) return;

    const onScroll = () => {
      const { scrollTop, scrollHeight, clientHeight } = container;
      if (scrollTop + clientHeight >= scrollHeight - 50 && !loading) {
        if (applyFilter) {
          const payload = {
            brand: selectedBrand,
            subCategory: selectedCategory,
            subCategory1: selectedSubCategory1,
            subCategory2: selectedSubCategory2,
            subCategory3: selectedSubCategory3,
          };
          fetchProductsWithFilter(payload);
        } else {
          fetchProducts();
        }
      }
    };
    container.addEventListener("scroll", onScroll);
    return () => container.removeEventListener("scroll", onScroll);
  }, [applyFilter, loading, selectedBrand, selectedCategory]);

  /* ---------------- search ---------------- */
  const debounce = (fn, delay) => {
    let t;
    return (...args) => {
      clearTimeout(t);
      t = setTimeout(() => fn(...args), delay);
    };
  };
  const debouncedSearch = useCallback(
    debounce((term) => console.log("Searching:", term), 1000),
    []
  );
  const handleSearchChange = (e) => {
    const val = e.target.value;
    setSearchTerm(val);
    debouncedSearch(val);
  };
  const handleSearchQueryChange = (e) => setSearchQuery(e.target.value);
  const handleSearch = () => {
    setSelectedBrand(null);
    setSelectedCategory(null);
    setSelectedSubCategory1([]);
    setSelectedSubCategory2([]);
    setSelectedSubCategory3([]);
    setApplyFilter(false);
    setProducts([]);
    fetchProducts(
      `https://www.boqmasteradmin.com/product/?search=${searchQuery}`
    );
  };

  /* ---------------- helpers ---------------- */
  const searchKeywords = searchTerm ? searchTerm.toLowerCase().split(" ") : [];

  const filteredBySearch = products.filter((p) => {
    const subs = [
      p.ProductName,
      p.SubCategory,
      p.SubCategory2,
      p.SubCategory3,
      p.SubCategory4,
      p.SubCategory5,
      p.SubCategory6,
    ];
    return searchKeywords.every((kw) =>
      subs.some((sub) => sub && sub.toLowerCase().includes(kw.toLowerCase()))
    );
  });

  /* ---------------- dynamic sub‑cat 11 & 12 lists ---------------- */
  const allSubCatEleven = Array.from(
    new Set(products.map((p) => p.SubCategory11).filter(Boolean))
  );
  const allSubCatTwelve = Array.from(
    new Set(products.map((p) => p.SubCategory12).filter(Boolean))
  );

  /* apply sliders / brand / sub‑cat filters – left unchanged for brevity */
  const finalProducts = filteredBySearch; // ← existing filtering kept

  const sortedProducts = finalProducts
    .slice()
    .sort((a, b) =>
      sortOrder === "asc" ? a.Price - b.Price : b.Price - a.Price
    );

  /* ---------------- CTA helpers ---------------- */
  const callFetchProductsWithFilter = () => {
    if (
      selectedBrand ||
      selectedCategory ||
      selectedSubCategory1.length ||
      selectedSubCategory2.length ||
      selectedSubCategory3.length
    ) {
      const payload = {
        brand: selectedBrand,
        subCategory: selectedCategory,
        subCategory1: selectedSubCategory1,
        subCategory2: selectedSubCategory2,
        subCategory3: selectedSubCategory3,
      };
      setProducts([]);
      setApplyFilter(true);
      fetchProductsWithFilter(payload, nextFilterUrl);
    }
  };
  const clearFilters = () => {
    if (applyFilter) {
      setSelectedBrand(null);
      setSelectedCategory(null);
      setSelectedSubCategory1([]);
      setSelectedSubCategory2([]);
      setSelectedSubCategory3([]);
      setProducts([]);
      setApplyFilter(false);
      fetchProducts("https://www.boqmasteradmin.com/product/");
    }
  };

  /* ---------------- render ---------------- */
  const [navValue, setNavValue] = useState(0);

  return (
    <Container>
      {/* ───── top bar ───── */}
      <HeadCon>
        <BottomNavigation
          value={navValue}
          onChange={(_, v) => setNavValue(v)}
          showLabels
          sx={{
            background: "#09193d",
            borderRadius: "20px",
            color: "#b2b2b2",
            "& .Mui-selected, .Mui-selected > svg": {
              color: "#fff700",
            },
          }}
        >
          <CustomBottomNavigationAction
            component={Link}
            to="/"
            label="Home"
            value={0}
            icon={<Inventory />}
          />
          <CustomBottomNavigationAction
            component={Link}
            to="/Groups"
            label="Groups"
            value={1}
            icon={<Category />}
          />
          <CustomBottomNavigationAction
            component={Link}
            to="/auxiliaries"
            label="Auxiliaries"
            value={2}
            icon={<BackupTable />}
          />
        </BottomNavigation>

        <SearchCon bg="#f2f2f2" bor="#e0e0e0" col="#4f4f4f">
          <SearchAppBar
            search={searchQuery}
            onchange={handleSearchQueryChange}
          />
          <OutlineButton style={{ marginLeft: "auto" }} onClick={handleSearch}>
            Search
          </OutlineButton>
        </SearchCon>

        <CartCont>
          <IconButton component={Link} to="/table" sx={{ color: "white" }}>
            <StyledBadge badgeContent={cartLen}>
              <BackupTable />
            </StyledBadge>
          </IconButton>
        </CartCont>
      </HeadCon>

      {/* ───── body ───── */}
      <ContainerWhole>
        {/* ─── filters column ─── */}
        <FilterWrap>
          <Filter
            selectedBrand={selectedBrand}
            selectedCategory={selectedCategory}
            selectedSubCategory1={selectedSubCategory1}
            selectedSubCategory2={selectedSubCategory2}
            selectedSubCategory3={selectedSubCategory3}
            setSelectedBrand={setSelectedBrand}
            setSelectedCategory={setSelectedCategory}
            setSelectedSubCategory1={setSelectedSubCategory1}
            setSelectedSubCategory2={setSelectedSubCategory2}
            setSelectedSubCategory3={setSelectedSubCategory3}
          />

          {/* sticky apply / clear */}
          <StickyBottom>
            <PrimaryButton onClick={callFetchProductsWithFilter}>
              Apply Filter
            </PrimaryButton>
            <OutlineButton onClick={clearFilters}>Clear Filter</OutlineButton>
          </StickyBottom>

          {/* Sub Cat 6 → all unique SubCategory11 */}
          <div style={{ display: "flex", gap: "1.5vw", marginBottom: "2vh" }}>
            <FilterTwoCont>
              <FilterHead>Sub Cat 6</FilterHead>
              <FilterContTwo>
                {allSubCatEleven.map((sub11) => (
                  <FilterCont key={sub11}>
                    <Checkbox
                      value={sub11}
                      checked={selectedSubEleven.includes(sub11)}
                      onChange={(e) =>
                        setSelectedSubEleven((prev) =>
                          e.target.checked
                            ? [...prev, sub11]
                            : prev.filter((v) => v !== sub11)
                        )
                      }
                      sx={{
                        color: "#e0e0e0",
                        "&.Mui-checked": { color: "#ff6600" },
                      }}
                    />
                    {sub11}
                  </FilterCont>
                ))}
              </FilterContTwo>
            </FilterTwoCont>

            {/* Sub Cat 7 → all unique SubCategory12 */}
            <FilterTwoCont>
              <FilterHead>Sub Cat 7</FilterHead>
              <FilterContTwo>
                {allSubCatTwelve.map((sub12) => (
                  <FilterCont key={sub12}>
                    <Checkbox
                      value={sub12}
                      checked={selectedSubTwelve.includes(sub12)}
                      onChange={(e) =>
                        setSelectedSubTwelve((prev) =>
                          e.target.checked
                            ? [...prev, sub12]
                            : prev.filter((v) => v !== sub12)
                        )
                      }
                      sx={{
                        color: "#e0e0e0",
                        "&.Mui-checked": { color: "#ff6600" },
                      }}
                    />
                    {sub12}
                  </FilterCont>
                ))}
              </FilterContTwo>
            </FilterTwoCont>
          </div>
        </FilterWrap>

        {/* ─── products column ─── */}
        <WrapperWhole>
          <WrapperHead>
            <WrapperTit>{searchTerm}</WrapperTit>
            <WrapperFlex>
              <WrapperNum>‘{count}’ Results</WrapperNum>
              <NameInput style={{ marginLeft: 16 }}>
                <TextField
                  label="Card Header"
                  size="small"
                  value={headName}
                  onChange={(e) => setHeadName(e.target.value)}
                />
              </NameInput>
              <Sort>
                <NameInput>
                  <Input
                    value={searchTerm}
                    onChange={handleSearchChange}
                    placeholder="Search"
                  />
                </NameInput>
                <SortText>Sort by price:</SortText>
                <FormControl sx={{ m: 1, minWidth: 120 }} size="small">
                  <Select value={sortOrder} displayEmpty>
                    <MenuItem onClick={() => setSortOrder("desc")} value="desc">
                      High → Low
                    </MenuItem>
                    <MenuItem onClick={() => setSortOrder("asc")} value="asc">
                      Low → High
                    </MenuItem>
                  </Select>
                </FormControl>
              </Sort>
            </WrapperFlex>
          </WrapperHead>

          {/* product grid */}
          <Wrapper ref={scrollContainerRef}>
            {sortedProducts.map((p) => (
              <ProductCard key={p.id} HeadName={headName} Prod={p} />
            ))}
            {loading && <div className="spinner">🔄 Loading more…</div>}
            {error && <div style={{ color: "red" }}>{error}</div>}
            {!nextUrl && !loading && <p>✅ All products loaded.</p>}
          </Wrapper>
        </WrapperWhole>
      </ContainerWhole>
    </Container>
  );
};

export default ProductListing;
